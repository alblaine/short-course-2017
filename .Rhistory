count(word1, title, sort = TRUE)
bigram_search
# searches for top bigrams based on input for word2
bigram_search <- bigrams_filtered %>%
filter(word2 == "heart") %>%
count(word1, title, sort = TRUE)
bigram_search
View(bigrams_separated)
View(bigrams_separated)
bigrams_separated <- poe_bigrams %>%
separate(bigram, c("word1", "word2"), sep = " ") %>%
mutate(word1 = str_extract(word1, "[a-z']+")) %>%
mutate(word2 = str_extract(word2, "[a-z']+"))
bigrams_filtered <- bigrams_separated %>%
filter(!word1 %in% stop_words$word) %>%
filter(!word2 %in% stop_words$word)
View(bigrams_filtered)
bigram_counts <- bigrams_filtered %>%
count(word1, word2, sort = TRUE)
# searches for top bigrams based on input for word2
bigram_search <- bigrams_filtered %>%
filter(word2 == "heart") %>%
count(word1, title, sort = TRUE)
bigram_search
View(bigram_search)
View(bigram_search)
bigram_search_all <- bigram_search %>%
ungroup()
View(bigram_search)
View(bigram_search_all)
bigram_search_all <- bigrams_filtered %>%
filter(word2 == "heart") %>%
count(word1, sort = TRUE)
View(bigram_search_all)
bigram_no_titles <- bigrams_filtered %>%
filter(word2 == "heart") %>%
count(word1, sort = TRUE)
# searches for top bigrams overall based on word1 ("heart")
bigram_no_titles <- bigrams_filtered %>%
filter(word2 == "heart") %>%
count(word1, sort = TRUE)
bigram_no_titles
nb_words <- tidy_poe %>%
bind_tf_idf(word, title, n)
nb_words
nb_words <- tidy_poe %>%
bind_tf_idf(word, title, n)
doc_words <- tidy_poe %>%
unnest_tokens(word, text) %>%
count(book, word, sort = TRUE) %>%
ungroup()
total_words <- doc_words %>%
group_by(title) %>%
summarize(total = sum(n))
doc_words <- tidy_poe %>%
unnest_tokens(word, text) %>%
count(book, word, sort = TRUE) %>%
ungroup()
head(frequency, 30)
mutate(tidy_poe, author = "Edgar Allan Poe") %>%
mutate(word = str_extract(word, "[a-z']+")) %>%
count(author, word, title) %>%
mutate(proportion = n / sum(n)) %>%
select(-n) %>%
spread(author, proportion) %>%
gather(author, proportion, `Edgar Allan Poe`)
ungroup(tidy_poe)
frequency <-
mutate(tidy_poe, author = "Edgar Allan Poe") %>%
mutate(word = str_extract(word, "[a-z']+")) %>%
count(author, word, title) %>%
mutate(proportion = n / sum(n)) %>%
select(-n) %>%
spread(author, proportion) %>%
gather(author, proportion, `Edgar Allan Poe`)
ungroup(tidy_poe)
frequency <-
mutate(tidy_poe, author = "Edgar Allan Poe") %>%
mutate(word = str_extract(word, "[a-z']+")) %>%
count(author, title) %>%
mutate(proportion = n / sum(n)) %>%
select(-n) %>%
spread(author, proportion) %>%
gather(author, proportion, `Edgar Allan Poe`)
head(frequency, 30)
ungroup(tidy_poe)
frequency <-
mutate(tidy_poe, author = "Edgar Allan Poe") %>%
mutate(word = str_extract(word, "[a-z']+")) %>%
count(author, title) %>%
mutate(proportion = n / sum(n)) %>%
select(-n) %>%
spread(title, proportion) %>%
gather(title, proportion, `Edgar Allan Poe`)
ungroup(tidy_poe)
frequency <-
mutate(tidy_poe) %>%
mutate(word = str_extract(word, "[a-z']+")) %>%
count(title, word) %>%
mutate(proportion = n / sum(n)) %>%
select(-n) %>%
spread(title, proportion) %>%
gather(title, proportion)
frequency <-
mutate(tidy_poe) %>%
mutate(word = str_extract(word, "[a-z']+")) %>%
count(title, word) %>%
mutate(proportion = n / sum(n)) %>%
select(-n) %>%
spread(title, proportion) %>%
gather(title, proportion)
ungroup(tidy_poe)
frequency <-
mutate(tidy_poe, author = "Edgar Allan Poe") %>%
mutate(word = str_extract(word, "[a-z']+")) %>%
count(author, word) %>%
mutate(proportion = n / sum(n)) %>%
select(-n) %>%
spread(author, proportion) %>%
gather(author, proportion, `Edgar Allan Poe`)
head(frequency, 30)
ungroup(tidy_poe)
frequency <-
mutate(tidy_poe, author = "Edgar Allan Poe") %>%
mutate(word = str_extract(word, "[a-z']+")) %>%
count(author, word) %>%
mutate(proportion = n / sum(n)) %>%
select(-n) %>%
spread(author, proportion) %>%
gather(author, proportion, sum(n), `Edgar Allan Poe`)
head(frequency, 30)
frequency <-
mutate(tidy_poe, author = "Edgar Allan Poe") %>%
mutate(word = str_extract(word, "[a-z']+")) %>%
count(author, word) %>%
mutate(proportion = n / sum(n)) %>%
select(-n) %>%
spread(author, proportion, sum(n)) %>%
gather(author, proportion, sum(n), `Edgar Allan Poe`)
frequency <-
mutate(tidy_poe, author = "Edgar Allan Poe") %>%
mutate(word = str_extract(word, "[a-z']+")) %>%
count(author, word) %>%
mutate(proportion = n / sum(n)) %>%
select(-n) %>%
spread(author, proportion) %>%
gather(author, proportion, `Edgar Allan Poe`)
ungroup(tidy_poe)
frequency <-
mutate(tidy_poe, author = "Edgar Allan Poe") %>%
mutate(word = str_extract(word, "[a-z']+")) %>%
count(author, word) %>%
mutate(proportion = n / sum(n)) %>%
select(-n) %>%
spread(author, proportion) %>%
gather(author, proportion, `Edgar Allan Poe`)
head(frequency, 30)
ungroup(tidy_poe)
frequency <-
mutate(tidy_poe, author = "Edgar Allan Poe") %>%
mutate(word = str_extract(word, "[a-z']+")) %>%
count(author, word) %>%
mutate(proportion = n / sum(n)) %>%
select(-n) %>%
spread(author, proportion) %>%
gather(author, proportion)
ungroup(tidy_poe)
frequency <-
mutate(tidy_poe, author = "Edgar Allan Poe") %>%
mutate(word = str_extract(word, "[a-z']+")) %>%
count(author, word) %>%
mutate(proportion = n / sum(n)) %>%
select(-n) %>%
spread(author, proportion) %>%
gather(author, proportion, `Edgar Allan Poe`)
doc_words <- tidy_poe %>%
unnest_tokens(word, text) %>%
count(title, word, sort = TRUE) %>%
ungroup()
doc_words <- tidy_poe() %>%
unnest_tokens(word, text) %>%
count(title, word, sort = TRUE) %>%
ungroup()
tidy_peo
tidy_poe
doc_words <- tidy_poe %>%
count(title, word, sort = TRUE) %>%
ungroup()
doc_words
total_words <- doc_words %>%
group_by(title) %>%
summarize(total = sum(n))
total_words
View(doc_words)
View(doc_words)
View(total_words)
poe_words <- left_join(doc_words, total_words)
poe_words
nb_words <- poe_words %>%
bind_tf_idf(word, title, n)
nb_words
View(nb_words)
View(nb_words)
ggplot(total_words, aes(n/total, fill = title)) +
geom_histogram(show.legend = FALSE) +
xlim(NA, 0.0009) +
facet_wrap(~title, ncol = 2, scales = "free_y")
ggplot(total_words, aes(n/sum(n), fill = title)) +
geom_histogram(show.legend = FALSE) +
xlim(NA, 0.0009) +
facet_wrap(~title, ncol = 2, scales = "free_y")
ggplot(total_words, aes(n/totalwords$total, fill = title)) +
geom_histogram(show.legend = FALSE) +
xlim(NA, 0.0009) +
facet_wrap(~title, ncol = 2, scales = "free_y")
ggplot(total_words, aes(n/total_words$total, fill = title)) +
geom_histogram(show.legend = FALSE) +
xlim(NA, 0.0009) +
facet_wrap(~title, ncol = 2, scales = "free_y")
n/total
total <- sum(total_words$n)
View(total_words)
summary(total)
ggplot(poe_words, aes(n/total, fill = title)) +
geom_histogram(show.legend = FALSE) +
xlim(NA, 0.0009) +
facet_wrap(~title, ncol = 2, scales = "free_y")
View(poe_words)
View(poe_words)
ggplot(poe_words, aes(n/total, fill = title)) +
geom_histogram(show.legend = FALSE) +
xlim(NA, 0.00009) +
facet_wrap(~title, ncol = 2, scales = "free_y")
ggplot(poe_words, aes(n/total, fill = title)) +
geom_histogram(show.legend = FALSE, bins = 20) +
xlim(NA, 0.00009) +
facet_wrap(~title, ncol = 2, scales = "free_y")
# creates a td_idf to find important terms by document
nb_words <- poe_words %>%
bind_tf_idf(word, title, n)
nb_words
poe_words <- poe_words %>%
bind_tf_idf(word, title, n)
# sorts so that high-ranking tdf-idf terms show up first
poe_words %>%
select(-total) %>%
arrange(desc(tf_idf))
View(poe_words)
poe_words %>%
select(-total) %>%
arrange(desc(tf_idf))
poe_words %>%
select(-total) %>%
arrange(desc(tf_idf))
head(poe_words)
poe_words %>%
select(-total) %>%
arrange(desc(tf_idf))
work_ids
poe
head(poe)
View(poe)
work_ids[!is.element work_ids, c(25525)]
View(work_ids)
ids <- work_ids[!work_ids %in% 25525]
ids
ids <- work_ids[!work_ids %in% 25524:25526]
ids
ids <- work_ids[!work_ids %in% work_ids[13]]
work_ids[13]
work_ids
work_ids[[1]]
work_ids[[[1]]]
work_ids[1][1]
my_data <- [-work_ids(13)]
my_data <- -work_ids(13)
my_data <- -work_ids[13]
work_ids
tribble(work_ids)
tribble(work_ids, gutenberg_id)
tribble(work_ids, "gutenberg_id")
tribble(work_ids, ~gutenberg_id)
tribble(work_ids, `~gutenberg_id``)
tribble(work_ids, `~gutenberg_id`)
tribble(work_ids, `gutenberg_id`)
work_ids
work_ids$gutenberg_id[13]
ids <- work_ids[!work_ids %in% work_ids$gutenberg_id[13]]
ids
ids <- work_ids[!work_ids$gutenberg_id[13]]
ids
ids <- work_ids[!work_ids %in% work_ids$gutenberg_id[13]]
ids
work_ids$gutenberg_id[13]
unwanted <- work_ids$gutenberg_id[13]
unwanted
ids <- work_ids[!work_ids %in% unwanted]
ids
newdata <- subset(work_ids, work_ids$gutenberg_id != 25525)
newdata
ids <- subset(work_ids, work_ids$gutenberg_id != 25525)
# downloads full texts of each work
works <- gutenberg_download(ids, meta_fields = "title", strip=TRUE)
# tokenizes the texts, groups them by title, and takes out stop words
tidy_poe <- works %>%
group_by(title) %>%
unnest_tokens(word,text) %>%
anti_join(stop_words)
# runs a word count and sorts highest first across all texts
count <- tidy_poe %>%
ungroup() %>%
count(word, sort = TRUE)
# creates a bar chart of most frequent words across all texts
tidy_poe %>%
ungroup() %>%
count(word, sort = TRUE) %>%
filter(n > 400) %>%
mutate(word = reorder(word, n)) %>%
ggplot(aes(word, n)) +
geom_col() +
xlab(NULL) +
coord_flip()
# counts frequency of words per document
doc_words <- tidy_poe %>%
count(title, word, sort = TRUE) %>%
ungroup()
# lists total number of words (n) by title
total_words <- doc_words %>%
group_by(title) %>%
summarize(total = sum(n))
# creates a joined table listing word frequencies and document word counts
poe_words <- left_join(doc_words, total_words)
# creates a td_idf ratio for each word to find important terms by document
poe_words <- poe_words %>%
bind_tf_idf(word, title, n)
# sorts so that high-ranking tdf-idf terms show up first
poe_words %>%
select(-total) %>%
arrange(desc(tf_idf))
plot_poe <- poe_words %>%
arrange(desc(tf_idf)) %>%
mutate(word = factor(word, levels = rev(unique(word))))
plot_poe %>%
top_n(20) %>%
ggplot(aes(word, tf_idf, fill = title)) +
geom_col() +
labs(x = NULL, y = "tf-idf") +
coord_flip()
plot_poe %>%
top_n(30) %>%
ggplot(aes(word, tf_idf, fill = title)) +
geom_col() +
labs(x = NULL, y = "tf-idf") +
coord_flip()
plot_poe %>%
top_n(25) %>%
ggplot(aes(word, tf_idf, fill = title)) +
geom_col() +
labs(x = NULL, y = "tf-idf") +
coord_flip()
plot_poe %>%
top_n(20) %>%
ggplot(aes(word, tf_idf, fill = title)) +
geom_col() +
labs(x = NULL, y = "tf-idf") +
coord_flip()
plot_poe %>%
group_by(title) %>%
top_n(15) %>%
ungroup %>%
ggplot(aes(word, tf_idf, fill = title)) +
geom_col(show.legend = FALSE) +
labs(x = NULL, y = "tf-idf") +
facet_wrap(~book, ncol = 2, scales = "free") +
coord_flip()
plot_poe %>%
group_by(title) %>%
top_n(15) %>%
ungroup %>%
ggplot(aes(word, tf_idf, fill = title)) +
geom_col(show.legend = FALSE) +
labs(x = NULL, y = "tf-idf") +
facet_wrap(~title, ncol = 2, scales = "free") +
coord_flip()
plot_poe %>%
top_n(15) %>%
ungroup %>%
ggplot(aes(word, tf_idf, fill = title)) +
geom_col(show.legend = FALSE) +
labs(x = NULL, y = "tf-idf") +
facet_wrap(~title, ncol = 2, scales = "free") +
coord_flip()
plot_poe %>%
top_n(25) %>%
ungroup %>%
ggplot(aes(word, tf_idf, fill = title)) +
geom_col(show.legend = FALSE) +
labs(x = NULL, y = "tf-idf") +
facet_wrap(~title, ncol = 2, scales = "free") +
coord_flip()
plot_poe %>%
top_n(15) %>%
ungroup %>%
ggplot(aes(word, tf_idf, fill = title)) +
geom_col(show.legend = FALSE) +
labs(x = NULL, y = "tf-idf") +
facet_wrap(~title, ncol = 2, scales = "free") +
coord_flip()
plot_poe %>%
top_n(15) %>%
ungroup %>%
ggplot(aes(word, tf_idf, fill = title)) +
geom_col(show.legend = FALSE) +
labs(x = NULL, y = "tf-idf") +
facet_wrap(~title, ncol = 3, scales = "free") +
coord_flip()
plot_poe %>%
top_n(15) %>%
ungroup %>%
ggplot(aes(word, tf_idf, fill = title)) +
geom_col(show.legend = FALSE) +
labs(x = NULL, y = "tf-idf") +
facet_wrap(~title, ncol = 1, scales = "free") +
coord_flip()
plot_poe %>%
top_n(15) %>%
ungroup %>%
ggplot(aes(word, tf_idf, fill = title)) +
geom_col(show.legend = FALSE) +
labs(x = NULL, y = "tf-idf") +
facet_wrap(~title, ncol = 2, scales = "free") +
coord_flip()
plot_poe %>%
top_n(15) %>%
ungroup %>%
ggplot(aes(word, tf_idf, fill = title)) +
geom_col(show.legend = FALSE) +
labs(x = NULL, y = "tf-idf") +
facet_wrap(~title, ncol = 2) +
coord_flip()
# graphs highest tf-idf by title
plot_poe %>%
top_n(15) %>%
ungroup %>%
ggplot(aes(word, tf_idf, fill = title)) +
geom_col(show.legend = FALSE) +
labs(x = NULL, y = "tf-idf") +
facet_wrap(~title, ncol = 2, scales = "free") +
coord_flip()
poe_words %>%
filter(str_detect(text, "ugh\\.")) %>%
select(text)
tidy_poe %>%
filter(str_detect(text, "ugh\\.")) %>%
select(text)
tidy_poe %>%
ungroup() %>%
filter(str_detect(text, "ugh\\.")) %>%
select(text)
works %>%
filter(str_detect(text, "ugh\\.")) %>%
select(text)
works %>%
filter(str_detect(text, "amontillado\\.")) %>%
select(text)
works %>%
filter(str_detect(text, "ugh\\.")) %>%
select(text)
works %>%
filter(str_detect(text, "peters\\.")) %>%
select(text)
works %>%
filter(str_detect(text, "nevermore\\.")) %>%
select(text)
works %>%
filter(str_detect(text, "ugh!\\.")) %>%
select(text)
works %>%
filter(str_detect(text, "heart\\.")) %>%
select(text)
works %>%
filter(str_detect(text, "heart\\.")) %>%
select(text, title)
works %>%
filter(str_detect(text, "heart\\.")) %>%
select(text, title) %>%
write.csv(.,file = "~/Desktop/text.csv")
works %>%
filter(str_detect(text, "heart\\.")) %>%
select(text, title) %>%
write.csv(.,file = "~/Users/ablaine/Desktop/poe.csv")
works %>%
filter(str_detect(text, "heart\\.")) %>%
select(text, title) %>%
write.csv(.,file = "~Desktop/poe.csv")
works %>%
filter(str_detect(text, "heart\\.")) %>%
select(text, title) %>%
write.csv(.,file = "~/Desktop/poe.csv")
works %>%
filter(str_detect(text, "heart")) %>%
select(text, title) %>%
write.csv(.,file = "~/Desktop/poe.csv")
tidy_poe %>%
ungroup() %>%
count(word, sort = TRUE) %>%
filter(n > 400) %>%
mutate(word = reorder(word, n)) %>%
ggplot(aes(word, n)) +
geom_col() +
xlab(NULL) +
coord_flip()
